function [N10pb,sigma_N10pb,N26pb,sigma_N26pb] = Npb_depth(measured_lat,measured_elv,z,rho,option)

%% Calculate the maximum estimation of the post-burial concentrations with 1 sigma error at the sampling location and penetration depth if the maximum exposure age (and additional erosion rate) of the surface is constrained.
%
%% Arguments:
% measured_lat: mearsured latitude of the samples (degree; scalar)
% measured_elv: mearsured elevation of the samples (m; scalar)
% z: depth of the samples (cm; scalar)
% rho: density of the overburdens (g/cm^3; scalar)
% option have a field as:
%   option.flag2: "1" for loading e.mat and "0" for using default value
%   zero for erosion rate for a "constant exposure" situation (unitless;
%   scalar)
%
%% Output
% N10pb: the maximum estimate of the post burial 10Be concentration
% (atom/g;scalar) 
% sigma_N10pb: 1 sigma absolute error of N10pb (atom/g;scalar)
% N26pb: the maximum estimate of the post burial 26Al concentration
% (atom/g;scalar) 
% sigma_N26pb: 1 sigma absolute error of N26pb (atom/g;scalar)

% The following two .mat files are needed in the calculation. They are the
% results of simulations using a MATLAB program "10Be_profile_simulator" by
% Hidy et al., 2010, G3. Contact Yizhou Yang (yyz606@pku.edu.cn) if you
% have troubles in exporting the simulated results.
% A.The "expo_age.mat" refers to exposure age. It has two variables
% "expo_age" (Kyr; scalar; the most probable value of the simulations of
% exposure age) and "expo_age_est" (Kyr; nx1 vector; the simulations of
% exposure age during each simulation).
% B. The "e.mat" refers to the erosion rate on the surface. The variables
% in the file are same as those in the "expo_age.mat". Here we only use "e"
% for following calculation.
% Note that you can fill the "expo_age.mat" with values generated by
% functions such as "normrnd()" and "chi2rnd" if its distributions have
% been already known. For example, if you know that the variable
% "expo_age_est" is a normal distribution and its expectation and standard
% deviation are "mu" and "s", respectively, you can run the codes below
% before the scripts and generate the "expo_age.mat" file.

% expo_age_est=zeros(1E4,1);
% for i=1:1E4
%   expo_age_est(i)=normrnd(mu,s);
% end
% expo_age=mu;
% save expo_age.mat expo_age expo_age_est

    if option.flag2==1
        load e.mat e
    elseif option.flag2==0
        e=0;
    end
    load expo_age.mat expo_age expo_age_est
    expo_age_est=expo_age_est./1E3;
    expo_age=expo_age/1E3;
    tmp=size(expo_age_est);
    n=tmp(1);

    % mean life for 10Be, 26Al, and bur
    tau_10=2.001;   % Chmeleff et al., 2010; Korshchinek et al., 2010
    sigma_tau_10=0.017;
    tau_26=1.034;   % Samworth et al., 1972
    sigma_tau_26=0.024;

    [P10n_z,sigma_P10n_z,P10ms_z,sigma_P10ms_z,P10mf_z,sigma_P10mf_z]=production_rate(measured_lat,measured_elv,z,rho,10);
    [P26n_z,sigma_P26n_z,P26ms_z,sigma_P26ms_z,P26mf_z,sigma_P26mf_z]=production_rate(measured_lat,measured_elv,z,rho,26);

    Ln=160;
    Lms=1500;
    Lmf=4320;
    
    % post-burial 10Be
    N10n_pb_max=P10n_z/(1/tau_10/1E+06-rho*e/Ln)*(exp(-rho*expo_age*1E+06*e/Ln)-exp(-expo_age/tau_10));
    N10ms_pb_max=P10ms_z/(1/tau_10/1E+06-rho*e/Lms)*(exp(-rho*expo_age*1E+06*e/Lms)-exp(-expo_age/tau_10));
    N10mf_pb_max=P10mf_z/(1/tau_10/1E+06-rho*e/Lmf)*(exp(-rho*expo_age*1E+06*e/Lmf)-exp(-expo_age/tau_10));
    N10pb=N10n_pb_max+N10ms_pb_max+N10mf_pb_max;
    
    % Monte-Carlo for the error of post-burial 10Be
    cache=zeros(1,1E5);
    for i=1:1E5
        rand_P10n_z=normrnd(P10n_z,sigma_P10n_z);
        rand_P10ms_z=normrnd(P10ms_z,sigma_P10ms_z);
        rand_P10mf_z=normrnd(P10mf_z,sigma_P10mf_z);
        rand_tau_10=normrnd(tau_10,sigma_tau_10);
        expo_age=expo_age_est(randi([1,n]));

        rand_N10n_pb_max=rand_P10n_z/(1/rand_tau_10/1E+06-rho*e/Ln)*(exp(-rho*expo_age*1E+06*e/Ln)-exp(-expo_age/tau_10));
        rand_N10ms_pb_max=rand_P10ms_z/(1/rand_tau_10/1E+06-rho*e/Lms)*(exp(-rho*expo_age*1E+06*e/Lms)-exp(-expo_age/tau_10));
        rand_N10mf_pb_max=rand_P10mf_z/(1/rand_tau_10/1E+06-rho*e/Lmf)*(exp(-rho*expo_age*1E+06*e/Lmf)-exp(-expo_age/tau_10));
        rand_N10pb=rand_N10n_pb_max+rand_N10ms_pb_max+rand_N10mf_pb_max;
        cache(i)=(rand_N10pb);
    end
    sigma_N10pb=std(cache);

    % post-burial 26Al
    N26n_pb_max=P26n_z/(1/tau_26/1E+06-rho*e/Ln)*(exp(-rho*expo_age*1E+06*e/Ln)-exp(-expo_age/tau_26));
    N26ms_pb_max=P26ms_z/(1/tau_26/1E+06-rho*e/Lms)*(exp(-rho*expo_age*1E+06*e/Lms)-exp(-expo_age/tau_26));
    N26mf_pb_max=P26mf_z/(1/tau_26/1E+06-rho*e/Lmf)*(exp(-rho*expo_age*1E+06*e/Lmf)-exp(-expo_age/tau_26));
    N26pb=N26n_pb_max+N26ms_pb_max+N26mf_pb_max;

    % Monte-Carlo for the error of post-burial 26Al
    cache=zeros(1,1E5);
    for i=1:1E5
        rand_P26n_z=normrnd(P26n_z,sigma_P26n_z);
        rand_P26ms_z=normrnd(P26ms_z,sigma_P26ms_z);
        rand_P26mf_z=normrnd(P26mf_z,sigma_P26mf_z);
        rand_tau_26=normrnd(tau_26,sigma_tau_26);
        expo_age=expo_age_est(randi([1,n]));

        rand_N26n_pb_max=rand_P26n_z/(1/rand_tau_26/1E+06-rho*e/Ln)*(exp(-rho*expo_age*1E+06*e/Ln)-exp(-expo_age/tau_26));
        rand_N26ms_pb_max=rand_P26ms_z/(1/rand_tau_26/1E+06-rho*e/Lms)*(exp(-rho*expo_age*1E+06*e/Lms)-exp(-expo_age/tau_26));
        rand_N26mf_pb_max=rand_P26mf_z/(1/rand_tau_26/1E+06-rho*e/Lmf)*(exp(-rho*expo_age*1E+06*e/Lmf)-exp(-expo_age/tau_26));
        rand_N26pb=rand_N26n_pb_max+rand_N26ms_pb_max+rand_N26mf_pb_max;
        cache(i)=(rand_N26pb);
    end
    sigma_N26pb=std(cache);
end

